{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Dinujaya\\\\Desktop\\\\AwesomeProject\\\\Screens\\\\RouteDetails.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport getDirections from 'react-native-google-maps-directions';\nimport MapView, { Marker } from 'react-native-maps';\nimport MapViewDirections from 'react-native-maps-directions';\nimport React, { useState, useRef, Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport axios from 'axios';\n\nvar RouteDetails = function (_Component) {\n  _inherits(RouteDetails, _Component);\n\n  var _super = _createSuper(RouteDetails);\n\n  function RouteDetails() {\n    var _this;\n\n    _classCallCheck(this, RouteDetails);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      arr: [],\n      data: {\n        source: {\n          latitude: null,\n          longitude: null\n        },\n        destination: {\n          latitude: null,\n          longitude: null\n        },\n        params: [{\n          key: 'travelmode',\n          value: 'driving'\n        }, {\n          key: 'dir_action',\n          value: 'navigate'\n        }],\n        waypoints: []\n      }\n    };\n\n    _this.handleGetDirections = function (j) {\n      console.log(j);\n      axios.get(\"http://104.236.38.247:8000/api/routewaypoints/\" + j).then(function (res) {\n        _this.setState(function (cur) {\n          return _objectSpread(_objectSpread({}, cur), {}, {\n            data: _objectSpread(_objectSpread({}, cur.data), {}, {\n              source: {\n                latitude: res.data.details[0].start_lat,\n                longitude: res.data.details[0].start_lng\n              },\n              destination: {\n                latitude: res.data.details[0].end_lat,\n                longitude: res.data.details[0].end_lng\n              }\n            })\n          });\n        });\n\n        var _loop = function _loop(i) {\n          _this.setState(function (cur) {\n            return _objectSpread(_objectSpread({}, cur), {}, {\n              data: _objectSpread(_objectSpread({}, cur.data), {}, {\n                waypoints: [].concat(_toConsumableArray(cur.data.waypoints), [{\n                  latitude: res.data.waypoints[i].lat,\n                  longitude: res.data.waypoints[i].lng\n                }])\n              })\n            });\n          });\n        };\n\n        for (var i = 0; i < res.data.waypoints.length; i++) {\n          _loop(i);\n        }\n\n        console.log(_this.state.data);\n        getDirections(_this.state.data);\n      }).catch(function (error) {\n        console.log(error.message);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(RouteDetails, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      axios.get('http://104.236.38.247:8000/api/routeview/1').then(function (res) {\n        var count = Object.keys(res.data).length;\n\n        var _loop2 = function _loop2(i) {\n          _this2.setState(function (cur) {\n            return {\n              arr: [].concat(_toConsumableArray(cur.arr), [res.data[i]])\n            };\n          });\n        };\n\n        for (var i = 0; i < count; i++) {\n          _loop2(i);\n        }\n      }).catch(function (error) {\n        console.log(error.message);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(ScrollView, {\n        style: styles.scrollView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 9\n        }\n      }, this.state.arr.map(function (item, i) {\n        return React.createElement(View, {\n          key: i,\n          style: styles.container1,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 15\n          }\n        }, React.createElement(Text, {\n          style: {\n            color: 'blue',\n            textAlign: 'center',\n            fontWeight: 'bold',\n            fontSize: 25\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 17\n          }\n        }, item.route_name, ' '), React.createElement(Text, {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 17\n          }\n        }, \" \"), React.createElement(Button, {\n          key: i,\n          onPress: function onPress() {\n            return _this3.setState(function (cur) {\n              return _objectSpread(_objectSpread({}, cur), {}, {\n                data: {\n                  source: {\n                    latitude: null,\n                    longitude: null\n                  },\n                  destination: {\n                    latitude: null,\n                    longitude: null\n                  },\n                  params: [{\n                    key: 'travelmode',\n                    value: 'driving'\n                  }, {\n                    key: 'dir_action',\n                    value: 'navigate'\n                  }],\n                  waypoints: []\n                }\n              });\n            }) + _this3.handleGetDirections(item.RouteID);\n          },\n          title: \"Get Directions\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 17\n          }\n        }));\n      })));\n    }\n  }]);\n\n  return RouteDetails;\n}(Component);\n\nexport { RouteDetails as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF'\n  },\n  container1: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  map: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n});","map":{"version":3,"sources":["C:/Users/Dinujaya/Desktop/AwesomeProject/Screens/RouteDetails.js"],"names":["getDirections","MapView","Marker","MapViewDirections","React","useState","useRef","Component","axios","RouteDetails","state","arr","data","source","latitude","longitude","destination","params","key","value","waypoints","handleGetDirections","j","console","log","get","then","res","setState","cur","details","start_lat","start_lng","end_lat","end_lng","i","lat","lng","length","catch","error","message","count","Object","keys","styles","scrollView","container","map","item","container1","color","textAlign","fontWeight","fontSize","route_name","RouteID","StyleSheet","create","flex","justifyContent","alignItems","backgroundColor","flexDirection","position","top","left","right","bottom"],"mappings":"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","sourcesContent":["// import getDirections from 'react-native-google-maps-directions';\r\n// import MapView, {Marker} from 'react-native-maps';\r\n// import MapViewDirections from 'react-native-maps-directions';\r\n// import React, {useState, useRef, Component} from 'react';\r\n// import {\r\n//   View,\r\n//   StyleSheet,\r\n//   Dimensions,\r\n//   Text,\r\n//   FlatList,\r\n//   Button,\r\n//   TouchableHighlight,\r\n//   SafeAreaView,\r\n//   ScrollView,\r\n// } from 'react-native';\r\n// import axios from 'axios';\r\n\r\n// export default class RouteDetails extends Component {\r\n//   state = {\r\n//     arr: [],\r\n//     data: {\r\n//       source: {\r\n//         latitude: null,\r\n//         longitude: null,\r\n//       },\r\n//       destination: {\r\n//         latitude: null,\r\n//         longitude: null,\r\n//       },\r\n//       params: [\r\n//         {\r\n//           key: 'travelmode',\r\n//           value: 'driving', // may be \"walking\", \"bicycling\" or \"transit\" as well\r\n//         },\r\n//         {\r\n//           key: 'dir_action',\r\n//           value: 'navigate', // this instantly initializes navigation using the given travel mode\r\n//         },\r\n//       ],\r\n//       waypoints: [],\r\n//     },\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     axios\r\n//       .get('http://104.236.38.247:8000/api/routeview/1')\r\n//       .then((res) => {\r\n//         let count = Object.keys(res.data).length;\r\n//         for (let i = 0; i < count; i++) {\r\n//           this.setState((cur) => ({\r\n//             arr: [...cur.arr, res.data[i]],\r\n//           }));\r\n//         }\r\n//       })\r\n//       .catch((error) => {\r\n//         console.log(error.message);\r\n//       });\r\n//   }\r\n\r\n//   handleGetDirections = (j) => {\r\n//     console.log(j);\r\n//     axios\r\n//       .get(`http://104.236.38.247:8000/api/routewaypoints/${j}`)\r\n//       .then((res) => {\r\n//         this.setState((cur) => ({\r\n//           ...cur,\r\n//           data: {\r\n//             ...cur.data,\r\n//             source: {\r\n//               latitude: res.data.details[0].start_lat,\r\n//               longitude: res.data.details[0].start_lng,\r\n//             },\r\n//             destination: {\r\n//               latitude: res.data.details[0].end_lat,\r\n//               longitude: res.data.details[0].end_lng,\r\n//             },\r\n//           },\r\n//         }));\r\n//         for (let i = 0; i < res.data.waypoints.length; i++) {\r\n//           this.setState((cur) => ({\r\n//             ...cur,\r\n//             data: {\r\n//               ...cur.data,\r\n//               waypoints: [\r\n//                 ...cur.data.waypoints,\r\n//                 {\r\n//                   latitude: res.data.waypoints[i].lat,\r\n//                   longitude: res.data.waypoints[i].lng,\r\n//                 },\r\n//               ],\r\n//             },\r\n//           }));\r\n//         }\r\n//         console.log(this.state.data);\r\n//         getDirections(this.state.data);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.log(error.message);\r\n//       });\r\n//   };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n//   // handleGetDirections = () => {\r\n//   //   const data = {\r\n//   //      source: {\r\n//   //       latitude: 7.47042756308299,\r\n//   //       longitude:  80.04143103417100\r\n//   //     },\r\n//   //     destination: {\r\n//   //       latitude: \t7.48504549723226,\r\n//   //       longitude: 79.96841335257007\r\n//   //     },\r\n//   //     params: [\r\n//   //       {\r\n//   //         key: \"travelmode\",\r\n//   //         value: \"driving\"        // may be \"walking\", \"bicycling\" or \"transit\" as well\r\n//   //       },\r\n//   //       {\r\n//   //         key: \"dir_action\",\r\n//   //         value: \"navigate\"       // this instantly initializes navigation using the given travel mode\r\n//   //       }\r\n//   //     ],\r\n//   //     waypoints: [\r\n//   //       {\r\n//   //         latitude: 7.46881206450532,\r\n//   //         longitude: 80.03892887067295\r\n//   //       },\r\n//   //       {\r\n\r\n//   //         latitude: 7.46875021356944,\r\n//   //         longitude: 80.03445719672563\r\n//   //       },\r\n//   //          {\r\n//   //         latitude: 7.48718640183970,\r\n//   //         longitude: 80.02841179984696\r\n//   //       },\r\n//   //       {\r\n//   //         latitude: 7.49415661746365,\r\n//   //         longitude: 80.01735601887279\r\n//   //       },\r\n\r\n//   //     ]\r\n//   //   }\r\n\r\n//   //   getDirections(data)\r\n//   // }\r\n//   render() {\r\n//     return (\r\n//       <ScrollView style={styles.scrollView}>\r\n//         <View style={styles.container}>\r\n//           {/* <Text  style={{\r\n//                   color: 'green',\r\n//                   textAlign: 'center',\r\n//                   fontWeight: 'bold',\r\n//                   fontSize: 35,\r\n//                 }}>MY ROUTES</Text> */}\r\n//           {this.state.arr.map((item, i) => {\r\n//             return (\r\n//               <View key={i} style={styles.container1}>\r\n//                 <Text\r\n//                   style={{\r\n//                     color: 'blue',\r\n//                     textAlign: 'center',\r\n//                     fontWeight: 'bold',\r\n//                     fontSize: 25,\r\n//                   }}>\r\n//                   {item.route_name}{' '}\r\n//                 </Text>\r\n//                 <Text> </Text>\r\n//                 <Button\r\n//                   key={i}\r\n//                   onPress={() =>\r\n//                     this.setState((cur) => ({\r\n//                       ...cur,\r\n//                       data: {\r\n//                         source: {\r\n//                           latitude: null,\r\n//                           longitude: null,\r\n//                         },\r\n//                         destination: {\r\n//                           latitude: null,\r\n//                           longitude: null,\r\n//                         },\r\n//                         params: [\r\n//                           {\r\n//                             key: 'travelmode',\r\n//                             value: 'driving', // may be \"walking\", \"bicycling\" or \"transit\" as well\r\n//                           },\r\n//                           {\r\n//                             key: 'dir_action',\r\n//                             value: 'navigate', // this instantly initializes navigation using the given travel mode\r\n//                           },\r\n//                         ],\r\n//                         waypoints: [],\r\n//                       },\r\n//                     })) + this.handleGetDirections(item.RouteID)\r\n//                   }\r\n//                   title=\"Get Directions\"\r\n//                 />\r\n//               </View>\r\n//             );\r\n//           })}\r\n//         </View>\r\n//         {/* <Text>{\"\\n\"}</Text>\r\n       \r\n//    <View style={styles.container1}>\r\n//                   <Text style={{\r\n//                   color: 'blue',\r\n//                   textAlign: 'center',\r\n//                   fontWeight: 'bold',\r\n//                   fontSize: 25,\r\n//                 }} >Route </Text> \r\n//                 <Text>            </Text>\r\n//         <Button onPress={this.handleGetDirections} title=\"Get Directions\"  />\r\n\r\n//         </View>\r\n//         <Text>{\"\\n\"}</Text> */}\r\n//       </ScrollView>\r\n\r\n//       // {/* </View> */}\r\n//     );\r\n//   }\r\n// }\r\n\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     flex: 1,\r\n//     justifyContent: 'center',\r\n//     alignItems: 'center',\r\n//     backgroundColor: '#F5FCFF',\r\n//   },\r\n//   container1: {\r\n//     flex: 1,\r\n//     flexDirection: 'row',\r\n//     justifyContent: 'center',\r\n//     alignItems: 'center',\r\n//     // backgroundColor: '#FFFFFF',\r\n//   },\r\n//   map: {\r\n//     position: 'absolute',\r\n//     top: 0,\r\n//     left: 0,\r\n//     right: 0,\r\n//     bottom: 0,\r\n//   },\r\n// });\r\n\r\n// import React, { Component } from 'react'\r\n// import {\r\n//   View,\r\n//   Text,\r\n//   Image,\r\n//   Button,\r\n//   StyleSheet,\r\n//   StatusBar,\r\n//   TouchableOpacity,\r\n//   ScrollView,\r\n// } from 'react-native';\r\n// export default class RouteDetails extends Component {\r\n//   render() {\r\n//     return (\r\n//        <View></View>\r\n//     )\r\n//   }\r\n// }\r\n\r\n\r\nimport getDirections from 'react-native-google-maps-directions';\r\nimport MapView, {Marker} from 'react-native-maps';\r\nimport MapViewDirections from 'react-native-maps-directions';\r\nimport React, {useState, useRef, Component} from 'react';\r\nimport {\r\n  View,\r\n  StyleSheet,\r\n  Dimensions,\r\n  Text,\r\n  FlatList,\r\n  Button,\r\n  TouchableHighlight,\r\n  SafeAreaView,\r\n  ScrollView,\r\n} from 'react-native';\r\nimport axios from 'axios';\r\n\r\nexport default class RouteDetails extends Component {\r\n  state = {\r\n    arr: [],\r\n    data: {\r\n      source: {\r\n        latitude: null,\r\n        longitude: null,\r\n      },\r\n      destination: {\r\n        latitude: null,\r\n        longitude: null,\r\n      },\r\n      params: [\r\n        {\r\n          key: 'travelmode',\r\n          value: 'driving', // may be \"walking\", \"bicycling\" or \"transit\" as well\r\n        },\r\n        {\r\n          key: 'dir_action',\r\n          value: 'navigate', // this instantly initializes navigation using the given travel mode\r\n        },\r\n      ],\r\n      waypoints: [],\r\n    },\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .get('http://104.236.38.247:8000/api/routeview/1')\r\n      .then((res) => {\r\n        let count = Object.keys(res.data).length;\r\n        for (let i = 0; i < count; i++) {\r\n          this.setState((cur) => ({\r\n            arr: [...cur.arr, res.data[i]],\r\n          }));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n      });\r\n  }\r\n\r\n  handleGetDirections = (j) => {\r\n    console.log(j);\r\n    axios\r\n      .get(`http://104.236.38.247:8000/api/routewaypoints/${j}`)\r\n      .then((res) => {\r\n        this.setState((cur) => ({\r\n          ...cur,\r\n          data: {\r\n            ...cur.data,\r\n            source: {\r\n              latitude: res.data.details[0].start_lat,\r\n              longitude: res.data.details[0].start_lng,\r\n            },\r\n            destination: {\r\n              latitude: res.data.details[0].end_lat,\r\n              longitude: res.data.details[0].end_lng,\r\n            },\r\n          },\r\n        }));\r\n        for (let i = 0; i < res.data.waypoints.length; i++) {\r\n          this.setState((cur) => ({\r\n            ...cur,\r\n            data: {\r\n              ...cur.data,\r\n              waypoints: [\r\n                ...cur.data.waypoints,\r\n                {\r\n                  latitude: res.data.waypoints[i].lat,\r\n                  longitude: res.data.waypoints[i].lng,\r\n                },\r\n              ],\r\n            },\r\n          }));\r\n        }\r\n        console.log(this.state.data);\r\n        getDirections(this.state.data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n      });\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n  // handleGetDirections = () => {\r\n  //   const data = {\r\n  //      source: {\r\n  //       latitude: 7.47042756308299,\r\n  //       longitude:  80.04143103417100\r\n  //     },\r\n  //     destination: {\r\n  //       latitude: \t7.48504549723226,\r\n  //       longitude: 79.96841335257007\r\n  //     },\r\n  //     params: [\r\n  //       {\r\n  //         key: \"travelmode\",\r\n  //         value: \"driving\"        // may be \"walking\", \"bicycling\" or \"transit\" as well\r\n  //       },\r\n  //       {\r\n  //         key: \"dir_action\",\r\n  //         value: \"navigate\"       // this instantly initializes navigation using the given travel mode\r\n  //       }\r\n  //     ],\r\n  //     waypoints: [\r\n  //       {\r\n  //         latitude: 7.46881206450532,\r\n  //         longitude: 80.03892887067295\r\n  //       },\r\n  //       {\r\n\r\n  //         latitude: 7.46875021356944,\r\n  //         longitude: 80.03445719672563\r\n  //       },\r\n  //          {\r\n  //         latitude: 7.48718640183970,\r\n  //         longitude: 80.02841179984696\r\n  //       },\r\n  //       {\r\n  //         latitude: 7.49415661746365,\r\n  //         longitude: 80.01735601887279\r\n  //       },\r\n\r\n  //     ]\r\n  //   }\r\n\r\n  //   getDirections(data)\r\n  // }\r\n  render() {\r\n    return (\r\n      <ScrollView style={styles.scrollView}>\r\n        <View style={styles.container}>\r\n          {/* <Text  style={{\r\n                  color: 'green',\r\n                  textAlign: 'center',\r\n                  fontWeight: 'bold',\r\n                  fontSize: 35,\r\n                }}>MY ROUTES</Text> */}\r\n          {this.state.arr.map((item, i) => {\r\n            return (\r\n              <View key={i} style={styles.container1}>\r\n                <Text\r\n                  style={{\r\n                    color: 'blue',\r\n                    textAlign: 'center',\r\n                    fontWeight: 'bold',\r\n                    fontSize: 25,\r\n                  }}>\r\n                  {item.route_name}{' '}\r\n                </Text>\r\n                <Text> </Text>\r\n                <Button\r\n                  key={i}\r\n                  onPress={() =>\r\n                    this.setState((cur) => ({\r\n                      ...cur,\r\n                      data: {\r\n                        source: {\r\n                          latitude: null,\r\n                          longitude: null,\r\n                        },\r\n                        destination: {\r\n                          latitude: null,\r\n                          longitude: null,\r\n                        },\r\n                        params: [\r\n                          {\r\n                            key: 'travelmode',\r\n                            value: 'driving', // may be \"walking\", \"bicycling\" or \"transit\" as well\r\n                          },\r\n                          {\r\n                            key: 'dir_action',\r\n                            value: 'navigate', // this instantly initializes navigation using the given travel mode\r\n                          },\r\n                        ],\r\n                        waypoints: [],\r\n                      },\r\n                    })) + this.handleGetDirections(item.RouteID)\r\n                  }\r\n                  title=\"Get Directions\"\r\n                />\r\n              </View>\r\n            );\r\n          })}\r\n        </View>\r\n        {/* <Text>{\"\\n\"}</Text>\r\n       \r\n   <View style={styles.container1}>\r\n                  <Text style={{\r\n                  color: 'blue',\r\n                  textAlign: 'center',\r\n                  fontWeight: 'bold',\r\n                  fontSize: 25,\r\n                }} >Route </Text> \r\n                <Text>            </Text>\r\n        <Button onPress={this.handleGetDirections} title=\"Get Directions\"  />\r\n\r\n        </View>\r\n        <Text>{\"\\n\"}</Text> */}\r\n      </ScrollView>\r\n\r\n      // {/* </View> */}\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: '#F5FCFF',\r\n  },\r\n  container1: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    // backgroundColor: '#FFFFFF',\r\n  },\r\n  map: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}